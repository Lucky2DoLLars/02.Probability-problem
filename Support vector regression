n = 1000
num_cols = 5
x = matrix(rnorm(n*num_cols),nrow=n,ncol=num_cols)
x = cbind(1,x)
beta = c(10,2,3,-1,5,4)
y = x %*% beta + rnorm(n)

dim(x)

x = x[,-1]

svr(x,y,e=1,lambda=1)





svr <- function(x, y, e = 1, lambda = 1) {
  # x: predictor
  # y: response
  # e: epsilon of the e-loss
  # lambda: regularization parameter
  
  
  library(kernlab)
  
  n = nrow(x)
  
  xx_t = x %*% t(x)
  
  D1 = rbind(xx_t,-xx_t)
  
  D2 = rbind(-xx_t,xx_t)
  
  D = cbind(D1,D2) / lambda
  
  c1 = e - y
  c2 = e + y
  
  c = rbind(c1,c2)

  b = 0
  r = 0
  A = matrix(c(rep(1,n),rep(-1,n)),nrow=1,ncol=2*n)
  
  
  l = rep(0, 2*n)
  u = rep(1, 2*n)
  

  
  obj = ipop(c, D, A, b, l, u, r)
  
  
  b = obj@primal
  
  beta = ( (b[1:n] - b[(n+1):(2*n)])%*% x )/lambda
  
  beta = c(beta)
  
  beta0 = mean(y) - sum(beta*colMeans(x))
  
  
  est <- c(beta0, beta) # beta0 for intercept, and beta for the coefficient vector
  
  return(est)
}
